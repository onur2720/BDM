import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import KFold, cross_val_score
from sklearn.preprocessing import LabelEncoder

# Load your dataset
url = "train.csv"

# Try reading the CSV with different delimiters
try:
    df = pd.read_csv(url)
except pd.errors.ParserError:
    try:
        df = pd.read_csv(url, sep=';')  # Handling semicolon-delimited files
    except pd.errors.ParserError:
        df = pd.read_csv(url, delimiter='\t')  # Handling tab-delimited files

# Print column names to verify 'Target' exists
print("Column names in DataFrame:", df.columns)

# Handle categorical variables with Label Encoding
label_encoders = {}
for column in df.select_dtypes(include=['object']).columns:
    label_encoders[column] = LabelEncoder()
    df[column] = label_encoders[column].fit_transform(df[column])

# Replace NaN values with a placeholder or an appropriate value
df.fillna(0, inplace=True)

# Replace 'Target' with your actual target column name
target_column_name = 'Target'  # Modify this if necessary
if target_column_name in df.columns:
    # Prepare your data
    X = df.drop(target_column_name, axis=1)
    y = df[target_column_name]

    # Initialize the model
    model = RandomForestClassifier()

    # Set up K-Fold cross-validation
    kf = KFold(n_splits=5, shuffle=True, random_state=42)

    # Perform cross-validation
    cv_scores = cross_val_score(model, X, y, cv=kf)

    # Output the results
    print("Cross-validation scores:", cv_scores)
    print("Mean CV Score:", cv_scores.mean())
else:
    print(f"Column '{target_column_name}' not found in DataFrame.")
